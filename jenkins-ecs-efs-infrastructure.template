{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template for the Jenkins  Build Server deployed in the ECS service with an EFS",
  "Metadata": {
    "Version": "v1.0",
    "Comment": "Created by Patrick Hynes"
  },
  "Parameters": {
    "BusinessUnit": {
      "Type": "Number",
      "Default": "0000000",
      "Description": "Business Unit number to bill resource against",
      "MinValue": "0000000",
      "MaxValue": "9999999"
    },
    "TagOwner": {
      "Type": "String",
      "Default": "Patrick Hynes",
      "Description": "Team (or person) launching instance and/or responsible for maintenance."
    },
    "TagUseCase": {
      "Type": "String",
      "Default": "Jenkins Build Server",
      "Description": "Team (or person) launching instance and/or responsible for maintenance."
    },
    "TagApplication": {
      "Type": "String",
      "Default": "Jenkins",
      "Description": "Team (or person) launching instance and/or responsible for maintenance."
    }
  },
  "Mappings": {
    "RegionAmazonECSOptimizedAMIMapping": {
      "us-east-1": {
        "AMI": "ami-52cd5445"
      },
      "us-west-1": {
        "AMI": "ami-efa1e28f"
      },
      "us-west-2": {
        "AMI": "ami-a426edc4"
      },
      "eu-west-1": {
        "AMI": "ami-7b244e08"
      },
      "eu-central-1": {
        "AMI": "ami-721aec1d"
      },
      "ap-northeast-1": {
        "AMI": "ami-058a4964"
      },
      "ap-southeast-1": {
        "AMI": "ami-0d9f466e"
      },
      "ap-southeast-2": {
        "AMI": "ami-7df2c61e"
      }
    }
  },
  "Resources": {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "jenkins-cluster"
      }
    },
    "ECSAutoScalingGroup": {
      "Properties": {
        "DesiredCapacity": 2,
        "LaunchConfigurationName": {
          "Ref": "ECSLaunchConfig"
        },
        "MaxSize": 2,
        "MinSize": 2,
        "VPCZoneIdentifier": [
          {
            "Fn::ImportValue": "AZ1-Id"
          },
          {
            "Fn::ImportValue": "AZ1-Id"
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Cost Center",
            "Value": "0017130",
            "PropagateAtLaunch": true
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "1",
          "MinInstancesInService": "1",
          "PauseTime": "PT5M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "ECSLaunchConfig": {
      "Properties": {
        "AssociatePublicIpAddress": false,
        "IamInstanceProfile": {
          "Ref": "ECSInstanceProfile"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "RegionAmazonECSOptimizedAMIMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "InstanceType": "m4.xlarge",
        "KeyName": "global-shared-services",
        "SecurityGroups": [
          {
            "Ref": "ECSClusterSecurityGroup"
          },
          {
            "Ref": "ECSContainerInstancesSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "set -ex\n",
                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-init -v ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource ECSLaunchConfig",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "ECSCluster"
                },
                " >> /etc/ecs/ecs.config\n",
                "mkdir -p /mnt/efs\n",
                "aws_az=\"$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)\"\n",
                "aws_region=\"${aws_az:0:${#aws_az}-1}\"\n",
                "echo \"${aws_az}.",
                {
                  "Ref": "EFSFileSystem"
                },
                ".efs.${aws_region}.amazonaws.com:/    /mnt/efs   nfs4    defaults\" >> /etc/fstab\n",
                "mount -a\n",
                "chmod -R 777 /mnt/efs\n",
                "service docker restart\n",
                "start ecs\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "  --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "  --resource ECSAutoScalingGroup",
                "  --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
        "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/etc/nginx/nginx.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "events {\n",
                      "  worker_connections 1024;\n",
                      "}\n",
                      "http {\n",
                      "  server {\n",
                      "    location / {\n",
                      "      proxy_pass http://",
                      {
                        "Fn::GetAtt": [
                          "JenkinsLoadBalancer",
                          "DNSName"
                        ]
                      },
                      ";\n",
                      "      proxy_read_timeout 90;\n",
                      "      proxy_redirect default;\n",
                      "      proxy_set_header Host $host:$server_port;\n",
                      "      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n",
                      "      proxy_set_header X-Real-IP $remote_addr;\n",
                      "    }\n",
                      "  }\n",
                      "}\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "packages": {
              "yum": {
                "nfs-utils": [

                ]
              }
            }
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "ECSClusterSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Fn::ImportValue": "VPC-Id"
        },
         "SecurityGroupIngress" : [{
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp": "0.0.0.0/0"
         }

         ],
        "GroupDescription": "Self-referencing security group to allow all traffic between ECS container instances and ELBs"
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ECSClusterSecurityGroupEgress": {
      "Properties": {
        "DestinationSecurityGroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "IpProtocol": "-1",
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupEgress"
    },
    "ECSClusterSecurityGroupIngress": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "ECSClusterSecurityGroup"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ECSContainerInstancesSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Fn::ImportValue": "VPC-Id"
        },
        "GroupDescription": "Security group for ECS container instances",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EFSMountTargetSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Fn::ImportValue": "VPC-Id"
        },
        "GroupDescription": "Security group to allow inbound NFS for EFS mount target from ECS container instances",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2049",
            "ToPort": "2049",
            "SourceSecurityGroupId": {
              "Ref": "ECSContainerInstancesSecurityGroup"
            }
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "EFSFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "ECSCluster"
            }
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "TagOwner"
            }
          },
          {
            "Key": "BusinessUnit",
            "Value": {
              "Ref": "BusinessUnit"
            }
          },
          {
            "Key": "Environment",
            "Value": "production"
          },
          {
            "Key": "Use Case",
            "Value": {
              "Ref": "TagUseCase"
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "TagApplication"
            }
          }
        ],
        "PerformanceMode": "generalPurpose"
      }
    },
    "EFSMountTarget1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "EFSMountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": "AZ1-Id"
        }
      }
    },
    "EFSMountTarget2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSFileSystem"
        },
        "SecurityGroups": [
          {
            "Ref": "EFSMountTargetSecurityGroup"
          }
        ],
        "SubnetId": {
          "Fn::ImportValue": "AZ1-Id"
        }
      }
    },
    "ECSInstanceProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ECSInstanceRole"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "ECSInstanceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AmazonEC2ContainerServiceforEC2Role",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:Submit*",
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "AmazonEC2ContainerServiceJenkinsPluginRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:DescribeContainerInstances",
                    "ecs:ListClusters",
                    "ecs:RegisterTaskDefinition"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:RunTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":task-definition/jenkins-slave:*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:ListContainerInstances",
                    "ecs:StopTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":cluster/",
                        {
                          "Ref": "ECSCluster"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:StopTask"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:ecs:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":task/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ECSServiceRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "AmazonEC2ContainerServiceRole",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "JenkinsLoadBalancer": {
      "Properties": {
        "Subnets": [
          {
            "Fn::ImportValue": "AZ1-Id"
          },
          {
            "Fn::ImportValue": "AZ1-Id"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Ref": "ECSClusterSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8080",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          },
          {
            "InstancePort": "50000",
            "InstanceProtocol": "TCP",
            "LoadBalancerPort": "50000",
            "Protocol": "TCP"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "2",
          "Interval": "30",
          "Target": "HTTP:8080/login",
          "Timeout": "5",
          "UnhealthyThreshold": "5"
        }
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "JenkinsECSService": {
      "Properties": {
        "Cluster": {
          "Ref": "ECSCluster"
        },
        "DesiredCount": 1,
        "LoadBalancers": [
          {
            "ContainerName": "jenkins",
            "ContainerPort": "8080",
            "LoadBalancerName": {
              "Ref": "JenkinsLoadBalancer"
            }
          }
        ],
        "Role": {
          "Ref": "ECSServiceRole"
        },
        "TaskDefinition": {
          "Ref": "JenkinsTaskDefinition"
        }
      },
      "Type": "AWS::ECS::Service"
    },
    "JenkinsTaskDefinition": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Name": "jenkins",
            "Image": "jenkins",
            "Hostname": "jenkins",
            "Cpu": 2048,
            "Memory": 10000,
            "Environment": [
              {
                "Name": "JAVA_OPTS",
                "Value": "-Djenkins.install.runSetupWizard=false"
              }
            ],
            "Essential": true,
            "MountPoints": [
              {
                "ContainerPath": "/var/jenkins_home",
                "SourceVolume": "efs-jenkins"
              }
            ],
            "PortMappings": [
              {
                "HostPort": 8080,
                "ContainerPort": 8080
              },
              {
                "HostPort": 50000,
                "ContainerPort": 50000
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Name": "efs-jenkins",
            "Host": {
              "SourcePath": "/mnt/efs"
            }
          }
        ]
      },
      "Type": "AWS::ECS::TaskDefinition"
    }
  },
  "Outputs": {
    "JenkinsURL": {
      "Description": "Jenkins configuration: \"Alternative Jenkins URL\"",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "JenkinsLoadBalancer",
                "DNSName"
              ]
            },
            "/"
          ]
        ]
      }
    }
  }
}